1. React 
- Component Based 
- Declarative 
- Single Page Applications 


- Components are the building blocks 

1. React creates a virtual DOM tree when a component renders.
2. If state or props change, React diffs the new virtual DOM with the previous one.
3. Only the changed nodes are updated in the real DOM.


Props - readonly data passed from parent to child components 
State - Local data that can change and cause the UI to rerender 


Lifecycle methods 
- Mounting 
- Updating 
- UnMounting 
- useEffect: Handles side effects (like componentDidMount, componentDidUpdate, and componentWillUnmount).

Example : 
// Runs once (like componentDidMount)
useEffect(() => {
console.log('Component mounted!');

// Cleanup function (like componentWillUnmount)
return () => console.log('Component will unmount!');
}, []);

// Runs every time count changes (like componentDidUpdate)
useEffect(() => {
console.log('Count changed:', count);
}, [count]);


useLayoutEffect 
- Runs synchronously immediately after all DOM mutations but before the browser has a chance to paint.


useRef
- hook that returns a mutable ref obj whose .current can hold any value 
- does not cause rerender on change and retains the value on rerenders 
- can be used for Accessing DOM Elements, or Storing Mutable Values etc 


There are majorly 4 hooks that are used 
- useState - to manage state 
- useEffect - to manage lifecyle and sideeffects of a component 
- useContect - provides a way to access context values
- useReducer - A hook for managing complex state logic in functional component


# createContext, useContext 
- Centralized Statemanagement 
- Decoupling - child do not need to know where the state compes from 
- Reactivity 



Custom hooks 
- it usually starts with use phrase like useForm, useFetch, useTimer
- can use useEffect, contexts, etc 
Benefits - Encapsulation, Lifecycle Management


## useReducer - centralized state management 
- provides a more structured way to handle complex state updates
- dispatch an action to a reducer function that determines how the state should update 


### Lazy Loading and Code Splitting
import React, { Suspense } from 'react';

const LazyComponent = React.lazy(() => import('./LazyComponent'));



### Testing in React 
- Jest 
- React Testing Library 
